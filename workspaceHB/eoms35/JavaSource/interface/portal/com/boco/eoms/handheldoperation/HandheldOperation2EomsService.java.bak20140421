package com.boco.eoms.handheldoperation;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.boco.eoms.base.util.ApplicationContextHolder;
import com.boco.eoms.base.util.StaticMethod;
import com.boco.eoms.commons.statistic.base.util.ExcelConverterUtil;
import com.boco.eoms.commons.system.area.model.TawSystemArea;
import com.boco.eoms.commons.system.area.service.ITawSystemAreaManager;
import com.boco.eoms.commons.system.user.model.TawSystemUser;
import com.boco.eoms.commons.system.user.service.ITawSystemUserManager;
import com.boco.eoms.commons.system.user.service.ITawSystemUserRefRoleManager;
import com.boco.eoms.commons.util.xml.XmlManage;
import com.boco.eoms.sheet.base.adapter.service.wps.WPSEngineServiceMethod;
import com.boco.eoms.sheet.base.service.IDownLoadSheetAccessoriesService;
import com.boco.eoms.sheet.base.util.Constants;
import com.boco.eoms.sheet.base.util.SheetBeanUtils;
import com.boco.eoms.sheet.base.util.SheetUtils;
import com.boco.eoms.sheet.base.util.UUIDHexGenerator;
import com.boco.eoms.sheet.commonfault.model.CommonFaultLink;
import com.boco.eoms.sheet.commonfault.model.CommonFaultMain;
import com.boco.eoms.sheet.commonfault.service.ICommonFaultAutoManager;
import com.boco.eoms.sheet.commonfault.service.ICommonFaultLinkManager;
import com.boco.eoms.sheet.commonfault.service.ICommonFaultMainManager;
import com.boco.eoms.sheet.commonfault.service.ICommonFaultTaskManager;
import com.boco.eoms.sheet.commonfault.task.impl.CommonFaultTask;
import com.boco.eoms.sheet.interfaceBase.util.InterfaceUtilProperties;
import com.boco.eoms.util.InterfaceUtil;

/**
 * 掌上运维与EOMS故障工单接口
 * @author sizhongyuan 20130904
 * 
 * */
public class HandheldOperation2EomsService {
	
	
	
	/**
	 * 工单数据服务接口
	 * @param opDetail 为封装好的xml格式字符串
	 * @exception Exception
	 * */
	public String getSheetInfoService(String opDetail) {
		
		String result ="";
		try{
		InterfaceUtil interfaceUtil =new InterfaceUtil();
		ICommonFaultMainManager mainservice = (ICommonFaultMainManager) ApplicationContextHolder.getInstance().getBean("iCommonFaultMainManager");
		ICommonFaultTaskManager taskservice = (ICommonFaultTaskManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultTaskManager");
		ITawSystemAreaManager areaservice = (ITawSystemAreaManager) ApplicationContextHolder.getInstance().getBean("ItawSystemAreaManager");
		CommonFaultMain main = new CommonFaultMain();
		//获取配置文件中工单数据服务接口对应的标签 
		String nodeName = XmlManage.getFile("/config/handheldoperation.xml").getProperty("interfaceType.dataService");
		System.out.println("HandheldOperation2EomsService.getSheetInfoService内对应的nodeName======"+nodeName);
		HashMap sheetMap = new HashMap();
		HandheldOperationUtil hoUtil =new HandheldOperationUtil();
		
		if(opDetail != null && !"".equals(opDetail)){
			//把输入进来的xml形式的opDetail转化为Map类型
			sheetMap=interfaceUtil.xmlElements(opDetail, sheetMap, "FieldContent");
			String sheet_id = StaticMethod.nullObject2String(sheetMap.get("Sheet_id"));
			if(sheet_id != null && !"".equals(sheet_id)){
				main = (CommonFaultMain)mainservice.getMainBySheetId(sheet_id);//获取CommonFaultMain对象
				if(null!=main){
					String toDeptId= main.getToDeptId();
					TawSystemArea area =areaservice.getAreaByAreaId(toDeptId);
					String areaName = area.getAreaname();
					main.setToDeptId(areaName);
					Map mainMap = SheetBeanUtils.bean2Map(main);
					if("1".equals(StaticMethod.nullObject2String(main.getStatus()))){//判断工单状态
						mainMap.put("taskStatus", "已归档");
					}else{
						String condition =" sheetId = '"+sheet_id+"' and taskstatus in ('2','8')";
						List taskList = taskservice.getTasksByCondition(condition);
							if(taskList!=null&&taskList.size()>0){
								CommonFaultTask task = (CommonFaultTask)taskList.get(0);
								String taskStatus = StaticMethod.nullObject2String(task.getTaskStatus());
								if("2".equals(taskStatus)){
									mainMap.put("taskStatus", "待受理");
								}else if("8".equals(taskStatus)){
									mainMap.put("taskStatus", "处理中");
								}
							}else{
								result =  "Status=-1;sheetDetail=;Errlist=工单数据服务接口没有找到工单流水号为 "+sheet_id+" 的工单未找到或不存在,请查证！";
								return result;
							}
						
					}
					//生成对应工单详细信息的opDetail
					opDetail = hoUtil.getXmlFromMap(mainMap, StaticMethod.getFilePathForUrl("classpath:config/handheldoperation.xml"), nodeName);
					result = "Status=0;sheetDetail="+opDetail+";Errlist=";
					return result;
					
				}else{
					result =  "Status=-1;sheetDetail=;Errlist=工单数据服务接口没有找到工单流水号为 "+sheet_id+" 的工单未找到或不存在,请查证！";
					return result;
				}
			}else{
				result =  "Status=-1;sheetDetail=;Errlist=工单数据服务接口没有找到对应工单流水号Sheet_id的参数,请查证！";
				return result;
			}
		}else{
			result ="Status=-1;sheetDetail=;Errlist=工单数据服务接口没有传入参数,请查证！";
		}
		return result;
		} catch (Exception e) {
			e.printStackTrace();
			result="Status=-1;sheetDetail=;Errlist=工单数据服务接口出错！详细信息为"+e.getMessage();
			return result;
		}
	}
	/**
	 * 工单受理状态更新请求接口
	 * */
	public String acceptSheet(String opDetail) {
		String result ="";
		try{
		InterfaceUtil interfaceUtil =new InterfaceUtil();
		HashMap sheetMap = new HashMap();
		HashMap columnMap = new HashMap();
		HashMap sheetMap1 = new HashMap();
		Map valueMap = new HashMap();
		ICommonFaultMainManager mainservice = (ICommonFaultMainManager) ApplicationContextHolder.getInstance().getBean("iCommonFaultMainManager");
		ICommonFaultTaskManager taskservice = (ICommonFaultTaskManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultTaskManager");
		ICommonFaultLinkManager linkservice = (ICommonFaultLinkManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultLinkManager");
		WPSEngineServiceMethod sm = new WPSEngineServiceMethod();
		String operateUserId ="";
		InterfaceUtilProperties properties = new InterfaceUtilProperties();
		//获取工单受理状态更新请求接口在xml中对应的标签
		String nodeName = XmlManage.getFile("/config/handheldoperation.xml").getProperty("interfaceType.acceptSheet");
		System.out.println("HandheldOperation2EomsService.acceptSheet内对应的nodeName======"+nodeName);
		
		if(opDetail != null && !"".equals(opDetail)){
			String filePath = StaticMethod.getFilePathForUrl("classpath:config/handheldoperation.xml");
			sheetMap=interfaceUtil.xmlElements(opDetail, sheetMap, "FieldContent");
			//将接口传来的数据与main表字段对应，并存放到map中
			valueMap = properties.getMapFromXml(sheetMap, filePath, nodeName);
			String sheet_id = StaticMethod.nullObject2String(sheetMap.get("Sheet_id"));
			String operate_userid = StaticMethod.nullObject2String(sheetMap.get("Operate_userid"));
			if(sheet_id != null && !"".equals(sheet_id)){
			  CommonFaultMain main = (CommonFaultMain)mainservice.getMainBySheetId(sheet_id);//获取对应的CommonFaultMain对象
			  int status=StaticMethod.nullObject2int(main.getStatus());
			  //判断此工单是否满足受理要求
			  if(status!=0){
					result = "Status=-1;sheetDetail=;Errlist=工单流水号为"+sheet_id+"的工单未处于运行状态,无法进行受理状态更新操作！";
					return result;
			  }else{
				  String sheetKey=StaticMethod.nullObject2String(main.getId());
				  String condition =" sheetKey = '"+sheetKey+"' and taskstatus ='2' and taskName ='SecondExcuteHumTask' ";
				  List taskList = taskservice.getTasksByCondition(condition);
				
				  if(taskList!=null&&taskList.size()>0){
					  CommonFaultTask task = (CommonFaultTask)taskList.get(0);
					  String operateType=StaticMethod.nullObject2String(task.getOperateType());
					  ITawSystemUserManager userMgr = (ITawSystemUserManager) ApplicationContextHolder.getInstance().getBean("itawSystemUserManager");
					  TawSystemUser user = userMgr.getUserByuserid(operate_userid);
					  if(operate_userid != null && !"".equals(operate_userid)){
							if("user".equals(operateType)){
								operateUserId = operate_userid;
							}else if("subrole".equals(operateType)){
								ITawSystemUserRefRoleManager usermgr = (ITawSystemUserRefRoleManager)  ApplicationContextHolder.getInstance().getBean("itawSystemUserRefRoleManager");
								List userList = usermgr.getRoleidByuserid(operate_userid);
								if(userList.contains(task.getTaskOwner())){
									operateUserId = operate_userid;
								}else{
									result = "Status=-1;Errlist=工单受理状态更新请求接口传入的处理人账号没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
									return result;
								}
							}else if("dept".equals(operateType)){
								if(task.getTaskOwner().equals(user.getDeptid())){
									operateUserId = operate_userid;
								}else{
									result = "Status=-1;Errlist=工单受理状态更新请求接口传入的处理人账号没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
									return result;
								}
							}
					  }else{
							result = "Status=-1;Errlist=工单受理状态更新请求接口传入的处理人账号为空,没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
							return result;
					  }
					  
					  if (user != null) {
						  valueMap.put("operateDeptId", user.getDeptid());
						  valueMap.put("operaterContact", user.getMobile());
					  }
					  
					  valueMap.put("operateUserId", operateUserId);
					  valueMap.put("operateRoleId", task.getOperateRoleId());
					  valueMap.put("mainId", main.getId());
					  valueMap.put("aiid", task.getId());
					  valueMap.put("toOrgRoleId", task.getOperateRoleId());
					  
					  
					  try {
						  sheetMap1.put("main", main);
						  sheetMap1.put("link", linkservice.getLinkObject().getClass().newInstance());
						  sheetMap1.put("operate", Constants.pageColumnName); 
						  columnMap.put("selfSheet", sheetMap1);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
						result = "Status=-1;sheetDetail=;Errlist=工单受理状态更新请求接口报错,详细内容为"+e.getMessage();
						return result;
					} catch (InstantiationException e) {
						e.printStackTrace();
						result = "Status=-1;sheetDetail=;Errlist=工单受理状态更新请求接口报错,详细内容为"+e.getMessage();
						return result;
					}
					  try {
						sm.claimTask(task.getId(), valueMap, columnMap, operateUserId);
					} catch (Exception e) {
						e.printStackTrace();
						result = "Status=-1;sheetDetail=;Errlist=工单受理状态更新请求接口报错,详细内容为"+e.getMessage();
						return result;
					}
					  result = "Status=0;Errlist=";
				  }else {
					  result = "Status=-1;Errlist=工单流水号为"+sheet_id+"的工单未处于待受理状态,无法进行受理状态更新操作！";
					  return result;
				  }
			  } 
			}else{
				result = "Status=-1;Errlist=工单受理状态更新请求接口传入参数不正确,请查证！";
				return result;
			}
		}else{
			result = "Status=-1;Errlist=工单受理状态更新请求接口没有传入opDetail参数,请查证！";
			return result;
		}
		return result;
		} catch (Exception e) {
			e.printStackTrace();
			result="Status=-1;sheetDetail=;Errlist=工单受理状态更新请求接口出错！详细信息为"+e.getMessage();
			return result;
		}
	}
	
	/**
	 * 工单处理完成提交请求接口
	 * */
	public String dealSheet(String opDetail) {
		String result ="";
		try{
		InterfaceUtil interfaceUtil =new InterfaceUtil();
		ICommonFaultMainManager mainservice = (ICommonFaultMainManager) ApplicationContextHolder.getInstance().getBean("iCommonFaultMainManager");
		ICommonFaultTaskManager taskservice = (ICommonFaultTaskManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultTaskManager");
		ICommonFaultLinkManager linkservice = (ICommonFaultLinkManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultLinkManager");
		WPSEngineServiceMethod sm = new WPSEngineServiceMethod();
		HashMap sheetMap = new HashMap();
		HashMap columnMap = new HashMap();
		HashMap sheetMap1 = new HashMap();
		String operateUserId ="";
		InterfaceUtilProperties properties = new InterfaceUtilProperties();
		String nodeName = XmlManage.getFile("/config/handheldoperation.xml").getProperty("interfaceType.dealSheet");
		System.out.println("HandheldOperation2EomsService.dealSheet内对应的nodeName======"+nodeName);
		String filePath = StaticMethod.getFilePathForUrl("classpath:config/handheldoperation.xml");
		if(opDetail != null && !"".equals(opDetail)){
			sheetMap=interfaceUtil.xmlElements(opDetail, sheetMap, "FieldContent");
			Map valueMap = properties.getMapFromXml(sheetMap, filePath, nodeName);
			
			String sheet_id = StaticMethod.nullObject2String(sheetMap.get("Sheet_id"));
			String operate_userid = StaticMethod.nullObject2String(sheetMap.get("Operate_userid"));
			String operate_time = StaticMethod.nullObject2String(sheetMap.get("Operate_time"));
			
			if(sheet_id != null && !"".equals(sheet_id)){
                CommonFaultMain main = (CommonFaultMain)mainservice.getMainBySheetId(sheet_id);//获取对应的CommonFaultMain对象
                int status=StaticMethod.nullObject2int(main.getStatus());
                //判断此工单是否满足受理要求
                if(status!=0){
                	result = "Status=-1;sheetDetail=;Errlist=工单流水号为"+sheet_id+"的工单未处于运行状态,无法进行受理状态更新操作！";
                	return result;
				}else{
                    String sheetKey=StaticMethod.nullObject2String(main.getId());
                    String condition =" sheetKey = '"+sheetKey+"' and taskstatus ='8' and taskName ='SecondExcuteHumTask' ";
                    List taskList = taskservice.getTasksByCondition(condition);
                    //判断工单状态是否在T2环节的处理中
                    if(taskList!=null&&taskList.size()>0){
					    CommonFaultTask task = (CommonFaultTask)taskList.get(0);
					    String operateType=StaticMethod.nullObject2String(task.getOperateType());
					    ITawSystemUserManager userMgr = (ITawSystemUserManager) ApplicationContextHolder.getInstance().getBean("itawSystemUserManager");
					    TawSystemUser user = userMgr.getUserByuserid(operate_userid);
					    	//判断传入的处理人账号是否具有操作权限
							if(operate_userid != null && !"".equals(operate_userid)){
								if(task.getTaskOwner().equals(operate_userid)){
									operateUserId = operate_userid;
								}else{
									if("user".equals(operateType)){
									    operateUserId = operate_userid;
									}else if("subrole".equals(operateType)){
										ITawSystemUserRefRoleManager usermgr = (ITawSystemUserRefRoleManager)  ApplicationContextHolder.getInstance().getBean("itawSystemUserRefRoleManager");
										List userList = usermgr.getRoleidByuserid(operate_userid);
										if(userList.contains(task.getTaskOwner())){
											operateUserId = operate_userid;
										}else{
											result = "Status=-1;Errlist=工单处理完成提交请求接口传入的处理人账号没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
											return result;
										}
									}else if("dept".equals(operateType)){
										if(task.getTaskOwner().equals(user.getDeptid())){
											operateUserId = operate_userid;
										}else{
											result = "Status=-1;Errlist=工单处理完成提交请求接口传入的处理人账号没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
											return result;
										}
									}
								}
								
						    }else{
								result = "Status=-1;Errlist=工单处理完成提交请求接口传入的处理人账号为空,没有权限对工单流水号为"+sheet_id+"的工单进行处理,请查证！";
								return result;
						    }
							ITawSystemUserManager usemgr = (ITawSystemUserManager) ApplicationContextHolder.getInstance().getBean("itawSystemUserManager");
						    if (user != null) {
							    valueMap.put("operateDeptId", user.getDeptid());
							    valueMap.put("operaterContact", user.getMobile());
							    }
							//valueMap.put("activeTemplateId", "SecondExcuteHumTask");
							valueMap.put("operateUserId", operateUserId);
							valueMap.put("operateRoleId", task.getOperateRoleId());
							valueMap.put("mainId", main.getId());
							valueMap.put("operateTime", operate_time);
							valueMap.put("aiid", task.getId());
							Date mainFaultGenerantTime = main.getMainFaultGenerantTime();
							Calendar cal = Calendar.getInstance();
							cal.setTime(mainFaultGenerantTime);
							cal.add(Calendar.MINUTE, 10);
							valueMap.put("faultdealTime", cal.getTime());
							TawSystemUser tawsystemuser = usemgr.getUserByuserid(operateUserId);
							valueMap.put("faultTreatment", StaticMethod.nullObject2String(tawsystemuser.getUsername()));
							valueMap.put("linkDealdesc", StaticMethod.nullObject2String(valueMap.get("linkDealStep")));
							Date mainAlarmSolveDate = main.getMainAlarmSolveDate();
							if (mainAlarmSolveDate != null) {
								valueMap.put("linkFaultAvoidTime", mainAlarmSolveDate);
								valueMap.put("linkOperRenewTime", mainAlarmSolveDate);
							}

							sheetMap1.put("main", main);
							sheetMap1.put("link", linkservice.getLinkObject().getClass().newInstance());
							sheetMap1.put("operate", Constants.pageColumnName); 
							columnMap.put("selfSheet", sheetMap1);
						  
							String mainAlarmId = StaticMethod.nullObject2String(main.getMainAlarmId());
							String mainFaultResponseLevel = StaticMethod.nullObject2String(main.getMainFaultResponseLevel());
							String linkDealStep = StaticMethod.nullObject2String(valueMap.get("linkDealStep"));
							String sendContact = StaticMethod.nullObject2String(main.getSendContact());
							Date operateTime = SheetUtils.stringToDate(operate_time);
							boolean inrule = true;
							String obj = "";
							System.out.println("lizhi:mainAlarmSolveDate=" + mainAlarmSolveDate + "sendContact=" + sendContact + "operateTime=" + operateTime + "mainFaultResponseLevel=" + mainFaultResponseLevel + "mainAlarmId=" + mainAlarmId + "linkDealStep=" + linkDealStep);
							if (mainAlarmSolveDate != null && !"".equals(sendContact) && operateTime.after(mainAlarmSolveDate) && !"101030401".equals(mainFaultResponseLevel))
							{
								ICommonFaultAutoManager autoservice = (ICommonFaultAutoManager)ApplicationContextHolder.getInstance().getBean("iCommonFaultAutoManager");
								List steplist = autoservice.getStepsbycondition(mainAlarmId, linkDealStep);
								if (steplist.size() > 0 && !"其它".equals(linkDealStep) && !"其他".equals(linkDealStep))
								{
									inrule = true;
									Object object[] = (Object[])steplist.get(0);
									obj = String.valueOf(object[2]);
								} else
								{
									inrule = false;
								}
								if (inrule)
								{
									valueMap.put("hasNextTaskFlag", "true");
									valueMap.put("phaseId", "");
									Calendar calendar = Calendar.getInstance();
									CommonFaultLink linkbean = (CommonFaultLink)linkservice.getLinkObject().getClass().newInstance();
									linkbean.setId(UUIDHexGenerator.getInstance().getID());
									linkbean.setMainId(StaticMethod.nullObject2String(main.getId()));
									linkbean.setOperateTime(calendar.getTime());
									linkbean.setOperateType(new Integer(18));
									linkbean.setOperateDay(calendar.get(5));
									linkbean.setOperateMonth(calendar.get(2) + 1);
									linkbean.setOperateYear(calendar.get(1));
									linkbean.setOperateUserId(StaticMethod.nullObject2String(main.getSendUserId()));
									linkbean.setOperateDeptId(StaticMethod.nullObject2String(main.getSendDeptId()));
									linkbean.setOperateRoleId(StaticMethod.nullObject2String(main.getSendRoleId()));
									linkbean.setOperaterContact(StaticMethod.nullObject2String(main.getSendContact()));
									linkbean.setToOrgRoleId("");
									linkbean.setToOrgType(new Integer(0));
									linkbean.setAcceptFlag(new Integer(2));
									linkbean.setCompleteFlag(new Integer(2));
									linkbean.setActiveTemplateId("HoldHumTask");
									linkservice.addLink(linkbean);
									if (main != null)
									{
										main.setEndResult(obj);
										main.setStatus(new Integer(1));
										main.setHoldStatisfied(Integer.valueOf(0xfb89d));
										mainservice.addMain(main);
									}
									CommonFaultTask taskhold = new CommonFaultTask();
									try
									{
										taskhold.setId(UUIDHexGenerator.getInstance().getID());
									}
									catch (Exception e3)
									{
										e3.printStackTrace();
									}
									taskhold.setTaskName("HoldHumTask");
									taskhold.setTaskDisplayName("待归档");
									taskhold.setFlowName("CommonFaultMainFlowProcess");
									taskhold.setSendTime(new Date());
									taskhold.setSheetKey(StaticMethod.nullObject2String(main.getId()));
									taskhold.setTaskStatus("5");
									taskhold.setSheetId(StaticMethod.nullObject2String(main.getSheetId()));
									taskhold.setTitle(StaticMethod.nullObject2String(main.getTitle()));
									taskhold.setOperateType("subrole");
									taskhold.setCreateTime(new Date());
									taskhold.setCreateYear(calendar.get(1));
									taskhold.setCreateMonth(calendar.get(2) + 1);
									taskhold.setCreateDay(calendar.get(5));
									taskhold.setOperateRoleId(StaticMethod.nullObject2String(main.getSendRoleId()));
									taskhold.setTaskOwner(StaticMethod.nullObject2String(main.getSendUserId()));
									taskhold.setOperateType("subrole");
									taskhold.setIfWaitForSubTask("false");
									taskhold.setParentTaskId("_AI:" + UUIDHexGenerator.getInstance().getID());
									taskhold.setPreLinkId(linkbean.getId());
									taskservice.addTask(taskhold);
								}
							}
							
							sm.dealSheet(sheetKey, valueMap, columnMap, operateUserId, taskservice);
							result = "Status=0;Errlist=";
					}else{
						result = "Status=-1;Errlist=工单流水号为"+sheet_id+"的工单未处于处理中状态,无法进行工单处理完成提交操作！";
						return result;
					}
				}
			}else{
				result = "Status=-1;Errlist=工单受理状态更新请求接口传入参数不正确,请查证！";
				return result;
			}
		}else{
			result = "Status=-1;Errlist=工单受理状态更新请求接口没有传入opDetail参数,请查证！";
			return result;
		}
		return result;
	} catch (Exception e) {
		e.printStackTrace();
		result="Status=-1;sheetDetail=;Errlist=工单受理状态更新请求接口出错！详细信息为"+e.getMessage();
		return result;
	}
	}
	
	
	/**
	 * 工单列表查询接口
	 * */
	public String getSheetListService(String opDetail) {
		String result ="";
		HashMap opDetailMap = new HashMap();
		InterfaceUtil interfaceUtil =new InterfaceUtil();
		ICommonFaultTaskManager taskservice = (ICommonFaultTaskManager)  ApplicationContextHolder.getInstance().getBean("iCommonFaultTaskManager");
		ITawSystemUserManager userMgr = (ITawSystemUserManager) ApplicationContextHolder.getInstance().getBean("itawSystemUserManager");
		HandheldOperationUtil hoUtil =new HandheldOperationUtil();
		try{
		  String nodeName = XmlManage.getFile("/config/handheldoperation.xml").getProperty("interfaceType.sheetList");
		  System.out.println("HandheldOperation2EomsService.getSheetListService内对应的nodeName======"+nodeName);
		  if(opDetail != null && !"".equals(opDetail)){
		    opDetailMap=interfaceUtil.xmlElements(opDetail, opDetailMap, "FieldContent");
			String user_id = StaticMethod.nullObject2String(opDetailMap.get("User_id"));
			String sheet_status = StaticMethod.nullObject2String(opDetailMap.get("Sheet_status"));
			
			int start_records = StaticMethod.nullObject2int(opDetailMap.get("Start_records")) -1;
			int end_records = StaticMethod.nullObject2int(opDetailMap.get("End_records"));
			TawSystemUser user = userMgr.getUserByuserid(user_id);
			HashMap taskMap = new HashMap();
			String hql = XmlManage.getFile("/config/handheldoperation.xml").getProperty("sql.sql"+sheet_status);
			hql = ExcelConverterUtil.replaceAll(hql, "@userId@", user_id);
			hql = ExcelConverterUtil.replaceAll(hql, "@deptId@", user.getDeptid());
			String countSql = "select count(distinct main.id) num  "+ hql.substring(hql.indexOf("from"), hql.length());
			String sql = "select * from (select a.*,rownum row_ from ("+hql+" ) a )where row_ <=" +end_records +" and row_ > "+start_records ;
			IDownLoadSheetAccessoriesService services = (IDownLoadSheetAccessoriesService)ApplicationContextHolder.getInstance().getBean("IDownLoadSheetAccessoriesService");
			List taskList = services.getSheetAccessoriesList(sql);
			List countList = services.getSheetAccessoriesList(countSql);
			Map countMap = (Map)countList.get(0);
//			if("1".equals(sheet_status)){//1：查询当前用户所有的待办工单；
//				taskMap = taskservice.getAllTaskByUserid(condition, user_id, user.getDeptid(), "CommonFaultMainFlowProcess", startIndex, length);
//			}else if("2".equals(sheet_status)){//2：查询当前用户未接单的待办工单；
//				taskMap = taskservice.getNoAcceptTaskByUserid(condition, user_id, user.getDeptid(), "CommonFaultMainFlowProcess", startIndex, length);
//			}else if("3".equals(sheet_status)){//3：查询当前用户已接单未处理的待办工单
//				taskMap = taskservice.getNoDealTaskByUserid(condition, user_id, user.getDeptid(), "CommonFaultMainFlowProcess", startIndex, length);
//			}else{
//				result ="Status=-1;sheetDetail=;Errlist=工单列表查询接口传入工单状态参数不对,请查证！Sheet_status ="+sheet_status;
//				return result;
//			}
			String sheet_totals = StaticMethod.nullObject2String(countMap.get("num"));
		    opDetail = hoUtil.getXmlFromMap(taskList, StaticMethod.getFilePathForUrl("classpath:config/handheldoperation.xml"), nodeName,sheet_totals);
		    result = "Status=0;sheetDetail="+opDetail+";Errlist=";
			return result; 
		  }else{
			result = "Status=-1;sheetDetail=;Errlist=工单列表查询接口没有传入opDetail参数,请查证！";
			return result;
		  }
		}catch (Exception e) {
			e.printStackTrace();
			result="Status=-1;sheetDetail=;Errlist=工单列表查询接口出错！详细信息为"+e.getMessage();
			return result;
		}
	}
	
	
}
