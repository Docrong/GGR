package com.boco.eoms.message.readme;

import java.io.File;
import java.util.List;

/**
 * <p>
 * Title:消息发送接口
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Date:May 19, 2008 10:23:38 AM
 * </p>
 * 
 * @author 曲静波
 * @version 3.5.1
 * 
 */
public interface MsgService {

	/**
	 * 消息发送，根据服务订阅信息发送消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param orgIds 
	 * 			  发送人员或者部门的串 格式：1,admin#1,sunshengtai#2,254 （其中1代表人员  2代表部门 254代表部门id）
	 * @param dispatchTime 
	 * 			  业务发送时间点
	 * @return success,fail（成功与否）
	 */
	public String sendMsg(String serviceId, String msg, String buzId, String orgIds, String dispatchTime);
	/**
	 * 消息发送，根据服务订阅信息发送消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param  orgIds
	 * 			  手机号以,分隔，如： 13510299287,13898979879,15934567876           
	 * @param dispatchTime 
	 * 			  业务发送时间点
	 * @return success,fail（成功与否）
	 */
	public String sendMsg4Mobiles(String serviceId, String msg, String buizId, String orgIds, String dispatchTime);
	/**
	 * 消息发送，根据服务订阅信息发送消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @return success,fail（成功与否）
	 */
	/**
     * 
     * @param serviceId
     * @param msg
     * @param buizId
     * @param orgIds 格式：13565656754,13520123288,13898979879,15934567876(电话号码用,分隔)
     * @param dispatchTime
     * @return
     */
    public String sendMsgByCondition(String msg, String orgIds);

	/**
	 * 消息发送，根据传递过来的内部系统组织（用户，角色，部门）id发送短信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param orgIds
	 *            系统组织（用户，角色，部门）ids,id与typ成对出现，中间以逗号相隔，多条之间以井号出现，如：1,userId#2,deptId,#3,roleId
	 * 
	 * @return success,fail（成功与否）
	 */
//	public String sendSMS4Org(String serviceId, String msg, String buzId,
//			String orgIds);

	/**
	 * 消息短信，根据手机号码发送
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param mobiles
	 *            电话号码，中间以逗号相隔
	 * @return success,fail（成功与否）
	 */
//	public String sendSMS4Mobile(String serviceId, String msg, String buzId,
//			String mobiles);
    /**
	 * 邮件发送，根据服务订阅信息发送邮件
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param subject 
	 * 			  邮件主题
	 * @param content
	 *            邮件内容
	 * @param buizId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param addresser
	 *            邮件的发件人 email格式 
	 * @param orgIds 
	 * 			  发送人员或者部门的串 格式：1,admin#1,sunshengtai#2,254 （其中1代表人员  2代表部门 254代表部门id）             
	 * @param dispatchTime 
	 * 			  业务发送时间点
	 * @param accessoriesUrl
	 * 			  附件url地址
	 * @return success,fail（成功与否）
	 */
    public String sendEmail(String serviceId, String subject, String content, String buizId, String addresser, String orgIds, String dispatchTime, String accessoriesUrl);

	/**
	 * 发送email，根据email发送
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param emails
	 *            多个email，以逗号分隔
	 * @return success,fail（成功与否）
	 */
//	public String sendEmail4Email(String serviceId, String msg, String buzId,
//			String emails);

	/**
	 * 发送email，根据传递过来的内部系统组织（用户，角色，部门）id发送email
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            发送内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param orgIds
	 *            系统组织（用户，角色，部门）ids,id与typ成对出现，中间以逗号相隔，多条之间以井号出现，如：userId,1#roleId,2
	 * @return success,fail（成功与否）
	 */
	public String sendEmail4Org(String serviceId, String subject, String msg, String buizId, String addresser,
			String orgIds, String dispatchTime, String accessoriesUrl);

	/**
	 * 发送语音，根据电话号码发送
	 * 
	 * @param serviceId  
	 * 				消息系统中订阅的服务id
	 * @param buizId 
	 * 				工单号
	 * @param dispatchTime
	 * 				发送时间点
	 * @param allocTime
	 * 				派单时间
	 * @param finishTime
	 * 				要求结束时间
	 * @param content
	 *            语音内容
	 * @param senderId
	 *            派单人userId
	 * @param orgIds
	 *            接单人userId （orgIds 格式：1,admin#1,sunshengtai#2,151(其中1代表人，2代表部门)）
	 * @return success,fail（成功与否）
	 */
	public String sendVoice(String serviceId, String buizId, String dispatchTime, String allocTime, String finishTime, 
			String content, String senderId, String orgIds);
	/**
	 * 发送语音，根据电话号码发送
	 * 
	 * @param serviceId  
	 * 				消息系统中订阅的服务id
	 * @param sheetNo 
	 * 				工单号
	 * @param allocTime
	 * 				派单时间
	 * @param finishTime
	 * 				要求结束时间
	 * @param content
	 *            语音内容
	 * @param telNum
	 *            工单接收人电话
	 * @param telNum2
	 *            工单负责人电话（如果没有就用telNum工单接收人电话）
	 * @param dispatchTel
	 * 				派单人电话（如果没有就用telNum工单接收人电话）
	 * @return success,fail（成功与否）
	 */
	public String sendVoice4Telphone(String serviceId, String sheetNo, String allocTime, String finishTime, 
			String content, String telNum, String telNum2, String dispatchTel);

	/**
	 * 发送语音,根据传递过来的内部系统组织（用户，角色，部门）id发送语音
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            语音内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param orgIds
	 *            系统组织（用户，角色，部门）ids,id与typ成对出现，中间以逗号相隔，多条之间以井号出现，如：userId,1#roleId,2
	 * @return success,fail（成功与否）
	 */
//	public String sendVoice4Org(String serviceId, String msg, String buzId,
//			String orgIds);

	/**
	 * 发送彩信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            语音内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param mobile
	 *            手机号码，以逗号分隔
	 * @return success,fail（成功与否）
	 */
	public String sendMms(String serviceId, String buzId, String orgIds, String dispatchTime, String subject, List mmsContentList);
	/**
	 * 发送彩信，根据手机号码发送
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            语音内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param mobile
	 *            手机号码，以逗号分隔
	 * @return success,fail（成功与否）
	 */
//	public String sendMMS4Mobile(String serviceId, String msg, String buzId,
//			String mobile);

	/**
	 * 发送彩信,根据传递过来的内部系统组织（用户，角色，部门）id发送彩信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param msg
	 *            语音内容
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @param orgIds
	 *            系统组织（用户，角色，部门）ids,id与typ成对出现，中间以逗号相隔，多条之间以井号出现，如：userId,1#roleId,2
	 * @return success,fail（成功与否）
	 */
//	public String sendMMS4Org(String serviceId, String msg, String buzId,
//			String orgIds);

	/**
	 * 消息发送是否成功
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @return success,fail（成功与否）
	 */
//	public String isSendSuccess(String serviceId, String buzId);

	/**
	 * 根据回调接口时传入的消息id，判断是否发送成功
	 * 
	 * @param serviceId
	 *            消息服务id
	 * @param id
	 *            回调接口时消息系统传入的唯一id
	 * @return success,fail（成功与否）
	 */
//	public String isSendSuccess4id(String serviceId, String id);

	/**
	 * 取消消息发送
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @return success,fail（成功与否）
	 */
//	public String cancelMsg(String serviceId, String buzId);

	/**
	 * 是否可以取消发送消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @return success,fail（成功与否）
	 */
//	public String isCancelMsg(String serviceId, String buzId);

	/**
	 * 是否已经取消了消息发送
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param buzId
	 *            具体调用消息服务的业务流水号，如：作业计划id（主键），主要为取消消息发送
	 * @return success,fail
	 */
//	public String isCanceldMsg(String serviceId, String buzId);

	/**
	 * 共发送了多少条消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送消息条数
	 */
//	public String countMsg(String serviceId);

	/**
	 * 共发送失败多少条消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送失败消息条数
	 */
//	public String countFaildMsg(String serviceId);

	/**
	 * 共发送了多少条短信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送短信条数
	 */
//	public String countSMS(String serviceId);

	/**
	 * 共发送了多少条email
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送email条数
	 */
//	public String countEmail(String serviceId);

	/**
	 * 共发送了多少条语音
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送语音条数
	 */
//	public String countVoice(String serviceId);

	/**
	 * 共发送了多少条彩信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送彩信条数
	 */
//	public String countMMS(String serviceId);

	/**
	 * 共发送成功多少条消息
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送消息条数
	 */
//	public String countSuccessedMsg(String serviceId);

	/**
	 * 共发送成功多少条短信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送短信条数
	 */
//	public String countSuccessedSMS(String serviceId);

	/**
	 * 共发送成功多少条email
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送email条数
	 */
//	public String countSuccessedEmail(String serviceId);

	/**
	 * 共发送成功多少条语音
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送语音条数
	 */
//	public String countSuccessedVoice(String serviceId);

	/**
	 * 共发送成功多少条彩信
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @return 共发送彩信条数
	 */
//	public String countSuccessedMMS(String serviceId);

	/**
	 * 根据消息系统回调sendMsg时给出的id唯一值查询发送成功消息
	 * 
	 * @param serviceId
	 *            消息服务id
	 * @param id
	 *            回调时传入的唯一id值
	 * @return 发送成功的消息记录
	 */
//	public String countSuccessedMsg4Id(String serviceId, String id);

	/**
	 * 根据消息系统回调sendMsg时给出的id唯一值查询发送失败消息
	 * 
	 * @param serviceId
	 *            消息服务id
	 * @param id
	 *            回调时传入的唯一id值
	 * @return 发送失败的消息记录
	 */
//	public String countFaildMsg4Id(String serviceId, String id);

	/**
	 * 分页取某服务全部消息记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedMsg(String serviceId, String pageCount, String curPage);

	/**
	 * 分页取短信记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSMS(String serviceId, String pageCount, String curPage);

	/**
	 * 分页取语音发送记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedVoice(String serviceId, String pageCount, String curPage);

	/**
	 * 分页取email发送记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedEmail(String serviceId, String pageCount, String curPage);

	/**
	 * 分页取彩信发送记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedMMs(String serviceId, String pageCount, String curPage);

	/**
	 * 分页显示发送失败记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedFaildMsg(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送彩信失败记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送彩信失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedFaildMMS(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送短信失败记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送短信失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedFaildSMS(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送语音失败记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送语音失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedFaildVoice(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送email失败记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送email失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedFaildEmail(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送成功记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送成功消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedMsg(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送彩信成功记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送彩信成功消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedMMS(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送短信成功记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送短信成功消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedSMS(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送语音成功记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送语音失成功息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedVoice(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 分页显示发送email成功记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送email成功消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedEmail(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 根据消息系统回调sendMsg时传入的id值，查询出发送成功的消息记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送成功消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedSuccessedMsg4Id(String serviceId, String pageCount,
//			String curPage);

	/**
	 * 根据消息系统回调sendMsg时传入的id值，查询出发送失败的消息记录
	 * 
	 * @param serviceId
	 *            消息系统中订阅的服务id
	 * @param pageCount
	 *            每页显示多少条
	 * @param curPage
	 *            取第几页
	 * @return 发送失败消息记录，每条之间以#号分隔，内容之间以逗号分隔
	 */
//	public String pagedfaildMsg4Id(String serviceId, String pageCount,
//			String curPage);
	public void closeSingleMsg(String serviceId, String buizId, String userId);
	public void closeEmail(String serviceId, String buizId, String userId);
	
	public void closeMsg(String serviceId, String buizId);
	public void closeEmail(String serviceId, String buizId);
	
	public String hasService(String serviceId);
	/**
	 * 根据userId返回符合条件的服务
	 * @param userId 新增服务的人
	 * @return 返回消息平台符合条件的服务，当userId为空时返回所有
	 */
	public String getAllServices(String userId);
	
	public String sendMsg4WebService(String serviceId, String msg, String buizId, String orgIds, String dispatchTime);
	
	public String xSaveXmlString(String xmlString);
	
	public String xGetAllServices();
	
	public String xGetXmlString(String id);
	public void xDeleteByWebService(String id);
	public String sendEmailByWeb(String serviceId, String subject, String msg,
			String buizId, String addresser, String orgIds,
			String dispatchTime, String accessoriesUrls);
}
